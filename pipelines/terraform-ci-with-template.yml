parameters:
- name: deploymentRegion
  displayName: Azure Storage Deployment Region
  type: string
  default: eastus
- name: workspace
  displayName: Terraform Workspace
  type: string
  default: ci
  values:
  - ci
  - ci1
  - ci2
  - ci3
  - cd1
  - cd2
  - cd3
- name: mode
  displayName: Mode
  type: string
  default: TryMitigateWithRegion
  values:
  - ReproduceConstraint 
  - MitigateWithJITFWUpdate
  - TryMitigateWithRegion
- name: clear
  displayName: Clear State
  type: boolean
  default: false
- name: testReentrance
  displayName: Test Terraform re-entrance (apply twice)
  type: boolean
  default: true
- name: destroy
  displayName: Destroy Infrastructure
  type: string
  default: Always
  values:
  - Always
  - Never 
  - 'On failure'
  - 'On success'
- name: unpinTerraformProviders
  displayName: Unpin Terraform provider versions
  type: boolean
  default: false

name: $(Date:yyyyMMdd)$(Rev:.r)-$(SourceBranchName)-${{ parameters.workspace }}-${{ parameters.deploymentRegion }}-${{ parameters.mode }}

resources:
  repositories:
  - repository: azure-identity-scripts
    type: github
    endpoint: github.com # Service Connection name
    name: geekzter/azure-identity-scripts

trigger: none

pr:
  branches:
    include:
    - '*'
  paths:
    exclude:
    - '.devcontainer/**'  
    - 'visuals/**'  
    - '*.md'  

schedules:
- cron: '0 23 * * *'
  displayName: 'Nightly build (UTC)'
  always: 'true'
  branches:
    include:
    - main

variables:
- group: 'storage-access-ci'
- name: 'repository'
  value: 'azure-same-region-storage-access'
- name: AZURE_EXTENSION_USE_DYNAMIC_INSTALL
  value: 'yes_without_prompt'
- name: 'identityRepository'
  value: '$(Build.SourcesDirectory)/azure-identity-scripts'
- name: 'identityScriptDirectory'
  value: '$(identityRepository)/scripts/azure-devops'
- name: 'TF_IN_AUTOMATION'
  value: 'true'
- name: 'TF_INPUT'
  value: 0
- ${{ if eq(parameters.mode,'TryMitigateWithRegion') }}:
  - name: 'TF_VAR_location'
    value: ${{ parameters.deploymentRegion }}
- name: 'TF_WORKSPACE'
  value: ${{ parameters.workspace }}
- name: 'scriptDirectory'
  value: '$(Build.SourcesDirectory)/azure-same-region-storage-access/scripts'
- name: 'terraformArtifactName'
  value: 'terraform'
- name: 'terraformDirectory'
  value: '$(Build.SourcesDirectory)/azure-same-region-storage-access/terraform'
- name: 'TF_VAR_resource_prefix'
  value: 'storage-access'
- name: 'TF_VAR_run_id'
  value: '$(Build.BuildId)'
- name: 'resourceGroup' 
  value: 'storage-access-$(TF_WORKSPACE)-$(TF_VAR_resource_suffix)'

jobs:
  - template: terraform-ci-template.yml
    parameters:
      name: 'provisioning1'
      displayName: 'Attempt #1: Provisioning Azure Storage with Terraform'
      deploymentRegion: ${{ parameters.deploymentRegion }}
      workspace: ${{ parameters.workspace }}
      mode: ${{ parameters.mode }}
      clear: ${{ parameters.clear }}
      testReentrance: ${{ parameters.testReentrance }}
      destroy: ${{ parameters.destroy }}
      unpinTerraform: false
      unpinTerraformProviders: ${{ parameters.unpinTerraformProviders }}

  - ${{ if eq(parameters.mode,'TryMitigateWithRegion') }}:
    - template: terraform-ci-template.yml
      parameters:
        name: 'provisioning2'
        displayName: 'Attempt #2: Provisioning Azure Storage with Terraform'
        precedingJob: 'provisioning1'
        deploymentRegion: ${{ parameters.deploymentRegion }}
        workspace: ${{ parameters.workspace }}
        mode: ${{ parameters.mode }}
        clear: ${{ parameters.clear }}
        testReentrance: ${{ parameters.testReentrance }}
        destroy: ${{ parameters.destroy }}
        unpinTerraform: false
        unpinTerraformProviders: ${{ parameters.unpinTerraformProviders }}

  - ${{ if eq(parameters.mode,'TryMitigateWithRegion') }}:
    - template: terraform-ci-template.yml
      parameters:
        name: 'provisioning3'
        displayName: 'Attempt #3: Provisioning Azure Storage with Terraform'
        precedingJob: 'provisioning2'
        deploymentRegion: ${{ parameters.deploymentRegion }}
        workspace: ${{ parameters.workspace }}
        mode: ${{ parameters.mode }}
        clear: ${{ parameters.clear }}
        testReentrance: ${{ parameters.testReentrance }}
        destroy: ${{ parameters.destroy }}
        unpinTerraform: false
        unpinTerraformProviders: ${{ parameters.unpinTerraformProviders }}

  - ${{ if eq(parameters.mode,'TryMitigateWithRegion') }}:
    - template: terraform-ci-template.yml
      parameters:
        name: 'provisioning4'
        displayName: 'Attempt #4: Provisioning Azure Storage with Terraform'
        precedingJob: 'provisioning3'
        deploymentRegion: ${{ parameters.deploymentRegion }}
        workspace: ${{ parameters.workspace }}
        mode: ${{ parameters.mode }}
        clear: ${{ parameters.clear }}
        testReentrance: ${{ parameters.testReentrance }}
        destroy: ${{ parameters.destroy }}
        unpinTerraform: false
        unpinTerraformProviders: ${{ parameters.unpinTerraformProviders }}

  - ${{ if eq(parameters.mode,'TryMitigateWithRegion') }}:
    - template: terraform-ci-template.yml
      parameters:
        name: 'provisioning5'
        displayName: 'Attempt #5: Provisioning Azure Storage with Terraform'
        precedingJob: 'provisioning4'
        deploymentRegion: ${{ parameters.deploymentRegion }}
        workspace: ${{ parameters.workspace }}
        mode: ${{ parameters.mode }}
        clear: ${{ parameters.clear }}
        testReentrance: ${{ parameters.testReentrance }}
        destroy: ${{ parameters.destroy }}
        unpinTerraform: false
        unpinTerraformProviders: ${{ parameters.unpinTerraformProviders }}

  - ${{ if ne(parameters.destroy, 'Never') }}:
    - job: 'Teardown'
      dependsOn:
        - provisioning1
        - ${{ if eq(parameters.mode,'TryMitigateWithRegion') }}:
          - provisioning5
      displayName: 'Tear down & Clean up (${{ lower(parameters.destroy) }})'
      ${{ if eq(parameters.destroy, 'Always') }}:
        condition: or(always(),canceled())
      ${{ if eq(parameters.destroy, 'On failure') }}:
        condition: not(eq(dependencies.provisioning5.outputs['provisioningResult.result'],'success'))
      ${{ if eq(parameters.destroy, 'On success') }}:
        condition: eq(dependencies.provisioning5.outputs['provisioningResult.result'],'success')

      variables:
        providerConfig: $[ dependencies.prepare.outputs['providerConfig.content'] ]
        terraformDirectory: $(Pipeline.Workspace)/$(terraformArtifactName)
        terraformVersion: 'latest'

      pool:
        vmImage: ubuntu-latest

      workspace:
        clean: all

      steps:
      - task: AzureCLI@2
        name: teardown
        displayName: 'Tear down remaining resources'
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $ErrorActionPreference = "Continue" # Continue to remove resources if remove by resource group fails
            # Build JMESPath expression
            $tagQuery = "[?tags.repository == '$(repository)' && tags.workspace == '${env:TF_WORKSPACE}' && tags.runid == '$(Build.BuildId)' && properties.provisioningState != 'Deleting'].id"
            Write-Host "Removing resources identified by `"$tagQuery`"..."

            # Remove resource groups
            $resourceGroupIDs = $(az group list --query "${tagQuery}" -o tsv)
            if ($resourceGroupIDs) {
              Write-Host "Removing resource group(s) `"${resourceGroupIDs}`"..."
              &{ # az writes information to stderr
                $ErrorActionPreference = 'SilentlyContinue'
                az resource delete --ids $resourceGroupIDs 2>&1
              }
            } else {
              Write-Host "No resource groups to remove"
            }

            # Remove (remaining) resources
            $resourceIDs = $(az resource list --query "${tagQuery}" -o tsv)
            if ($resourceIDs) {
              Write-Host "Removing resources `"${resourceIDs}`"..."
              &{ # az writes information to stderr
                $ErrorActionPreference = 'SilentlyContinue'
                az resource delete --ids $resourceIDs 2>&1
              }
            } else {
              Write-Host "No resources to remove"
            }
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          workingDirectory: '$(terraformDirectory)'

      - ${{ if parameters.clear }}: # Only works if we can identity the suffix and therefore the resource group name
        - task: AzureResourceManagerTemplateDeployment@3
          displayName: 'Delete $(resourceGroup)'
          condition: failed() # Try this if the previous approach failed
          inputs:
            deploymentScope: 'Resource Group'
            azureResourceManagerConnection: '$(subscriptionConnection)'
            subscriptionId: '$(ARM_SUBSCRIPTION_ID)'
            action: 'DeleteRG'
            resourceGroupName: '$(resourceGroup)'

      - download: current
        displayName: 'Download Terraform directory from provisioning job'
        artifact: $(terraformArtifactName)

      - pwsh: |
          $terraformVersion = (Get-Content .terraform-version)
          Write-Host "##vso[task.setvariable variable=version;isOutput=true]${terraformVersion}"
          # Copy-Item backend.tf.sample backend.tf
        name: terraformConfig
        displayName: 'Prepare Terraform config'
        workingDirectory: '$(terraformDirectory)'

      - task: TerraformInstaller@0
        condition: succeededOrFailed() # Procees clearing Terraform state, even if resources could not be removed
        displayName: 'Install terraform'
        inputs:
          terraformVersion: '$(terraformConfig.version)'

      - task: AzureCLI@2
        displayName: 'Terraform init'
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            # Propagate pipeline Service Principal as Terraform variables
            $env:ARM_CLIENT_ID       ??= $env:servicePrincipalId
            $env:ARM_CLIENT_SECRET   ??= $env:servicePrincipalKey
            $env:ARM_TENANT_ID       ??= $env:tenantId
            # Get from Azure CLI context
            $env:ARM_TENANT_ID       ??= $(az account show --query tenantId -o tsv)
            $env:ARM_SUBSCRIPTION_ID ??= $(az account show --query id -o tsv)

            ./deploy.ps1 -Init
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          workingDirectory: '$(scriptDirectory)'
          
      - task: AzureCLI@2
        name: cleanup
        displayName: 'Clean up Terraform state'
        condition: succeededOrFailed()
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            # Clean up Terraform state
            # Propagate pipeline Service Principal as Terraform variables
            $env:ARM_CLIENT_ID       ??= $env:servicePrincipalId
            $env:ARM_CLIENT_SECRET   ??= $env:servicePrincipalKey
            $env:ARM_TENANT_ID       ??= $env:tenantId
            # Get from Azure CLI context
            $env:ARM_TENANT_ID       ??= $(az account show --query tenantId -o tsv)
            $env:ARM_SUBSCRIPTION_ID ??= $(az account show --query id -o tsv)
            $terraformState = (terraform state pull | ConvertFrom-Json)
            if ($terraformState.resources) {
              Write-Host "Clearing Terraform state in workspace ${env:TF_WORKSPACE}..."
              $terraformState.outputs = New-Object PSObject # Empty output
              $terraformState.resources = @() # No resources
              $terraformState.serial++
              $terraformState | ConvertTo-Json | terraform state push -
            } else {
              Write-Host "No resources in Terraform state in workspace ${env:TF_WORKSPACE}..."
            }
            terraform state pull 
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          workingDirectory: '$(terraformDirectory)'      
