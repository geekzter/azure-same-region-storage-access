trigger: none

pr:
  branches:
    include:
    - '*'
  paths:
    exclude:
    - '.devcontainer/**'  
    - 'visuals/**'  
    - '*.md'  

schedules:
- cron: '0 23 * * *'
  displayName: 'Nightly build (UTC)'
  # Run if there are no changes
  always: 'true'
  branches:
    include:
    - main

variables:
- group: 'storage-access-ci'
- name: 'scriptDirectory'
  value: '$(Build.SourcesDirectory)/scripts'

jobs:
- job: 'azureregioninfo1'
  displayName: 'Show Azure info'
  pool:
    name: '$(pool)'
    vmImage: $(vmImage)
  steps:
    - pwsh: |
        Get-Item Env:* | Sort-Object -Property Name
      displayName: 'List environment variables'
    - pwsh: |
        if ($env:SYSTEM_DEBUG -eq "true") {
          $InformationPreference = "Continue"
          $VerbosePreference = "Continue"
          $DebugPreference = "Continue"
        }
        . ./functions.ps1
        $vmMetadata = (Get-ComputeMetadata)
        if ($vmMetaData) {
          Write-Host "`nAzure VM instance '${env:AGENT_MACHINENAME}' compute metadata:"
          $vmMetadata | Format-List -Property AzurePublicCloud, location, name, osType, vmId, vmSize

          Write-Host "`nAzure VM '${env:AGENT_MACHINENAME}' IP location info:"
          Invoke-RestMethod https://ipinfo.io/json | Format-List
        } else {
           Write-Warning "Agent with name '${env:AGENT_MACHINENAME}' does not appear to be an Azure VM"
        }

        $selfLink = "${env:SYSTEM_TASKDEFINITIONSURI}${env:SYSTEM_TEAMPROJECT}/_build/results?buildId=${env:BUILD_BUILDID}&view=logs&j=${env:SYSTEM_JOBID}&t=${env:SYSTEM_TASKINSTANCEID}"
        Write-Host "Link to this output: $selfLink"
      displayName: 'Show Azure VM instance info'
      workingDirectory: '$(scriptDirectory)'

- job: 'azureregioninfo2'
  displayName: 'Show Azure info'
  pool:
    name: '$(pool)'
    vmImage: $(vmImage)
  steps:
    - pwsh: |
        Get-Item Env:* | Sort-Object -Property Name
      displayName: 'List environment variables'
    - pwsh: |
        if ($env:SYSTEM_DEBUG -eq "true") {
          $InformationPreference = "Continue"
          $VerbosePreference = "Continue"
          $DebugPreference = "Continue"
        }
        . ./functions.ps1
        $vmMetadata = (Get-ComputeMetadata)
        Write-Host "`nAzure VM instance compute metadata for Job '${env:SYSTEM_JOBID}':"
        $vmMetadata | Format-List -Property AzurePublicCloud, location, name, osType, vmId, vmSize

        Write-Host "`nAzure VM IP location info for Job '${env:SYSTEM_JOBID}':"
        Invoke-RestMethod https://ipinfo.io/json | Format-List

        $selfLink = "${env:SYSTEM_TASKDEFINITIONSURI}${env:SYSTEM_TEAMPROJECT}/_build/results?buildId=${env:BUILD_BUILDID}&view=logs&j=${env:SYSTEM_JOBID}&t=${env:SYSTEM_TASKINSTANCEID}"
        Write-Host "Link to this output: $selfLink"
      displayName: 'Show Azure VM instance info'
      workingDirectory: '$(scriptDirectory)'

- job: 'azureregioninfo3'
  displayName: 'Show Azure info'
  pool:
    name: '$(pool)'
    vmImage: $(vmImage)
  steps:
    - pwsh: |
        Get-Item Env:* | Sort-Object -Property Name
      displayName: 'List environment variables'
    - pwsh: |
        if ($env:SYSTEM_DEBUG -eq "true") {
          $InformationPreference = "Continue"
          $VerbosePreference = "Continue"
          $DebugPreference = "Continue"
        }
        . ./functions.ps1
        $vmMetadata = (Get-ComputeMetadata)
        Write-Host "`nAzure VM instance compute metadata for Job '${env:SYSTEM_JOBID}':"
        $vmMetadata | Format-List -Property AzurePublicCloud, location, name, osType, vmId, vmSize

        Write-Host "`nAzure VM IP location info for Job '${env:SYSTEM_JOBID}':"
        Invoke-RestMethod https://ipinfo.io/json | Format-List

        $selfLink = "${env:SYSTEM_TASKDEFINITIONSURI}${env:SYSTEM_TEAMPROJECT}/_build/results?buildId=${env:BUILD_BUILDID}&view=logs&j=${env:SYSTEM_JOBID}&t=${env:SYSTEM_TASKINSTANCEID}"
        Write-Host "Link to this output: $selfLink"
      displayName: 'Show Azure VM instance info'
      workingDirectory: '$(scriptDirectory)'

- job: 'azureregioninfo4'
  displayName: 'Show Azure info'
  pool:
    name: '$(pool)'
    vmImage: $(vmImage)
  steps:
    - pwsh: |
        Get-Item Env:* | Sort-Object -Property Name
      displayName: 'List environment variables'
    - pwsh: |
        if ($env:SYSTEM_DEBUG -eq "true") {
          $InformationPreference = "Continue"
          $VerbosePreference = "Continue"
          $DebugPreference = "Continue"
        }
        . ./functions.ps1
        $vmMetadata = (Get-ComputeMetadata)
        Write-Host "`nAzure VM instance compute metadata for Job '${env:SYSTEM_JOBID}':"
        $vmMetadata | Format-List -Property AzurePublicCloud, location, name, osType, vmId, vmSize

        Write-Host "`nAzure VM IP location info for Job '${env:SYSTEM_JOBID}':"
        Invoke-RestMethod https://ipinfo.io/json | Format-List

        $selfLink = "${env:SYSTEM_TASKDEFINITIONSURI}${env:SYSTEM_TEAMPROJECT}/_build/results?buildId=${env:BUILD_BUILDID}&view=logs&j=${env:SYSTEM_JOBID}&t=${env:SYSTEM_TASKINSTANCEID}"
        Write-Host "Link to this output: $selfLink"
      displayName: 'Show Azure VM instance info'
      workingDirectory: '$(scriptDirectory)'


- job: 'azureregioninfo5'
  displayName: 'Show Azure info'
  pool:
    name: '$(pool)'
    vmImage: $(vmImage)
  steps:
    - pwsh: |
        Get-Item Env:* | Sort-Object -Property Name
      displayName: 'List environment variables'
    - pwsh: |
        if ($env:SYSTEM_DEBUG -eq "true") {
          $InformationPreference = "Continue"
          $VerbosePreference = "Continue"
          $DebugPreference = "Continue"
        }
        . ./functions.ps1
        $vmMetadata = (Get-ComputeMetadata)
        Write-Host "`nAzure VM instance compute metadata for Job '${env:SYSTEM_JOBID}':"
        $vmMetadata | Format-List -Property AzurePublicCloud, location, name, osType, vmId, vmSize

        Write-Host "`nAzure VM IP location info for Job '${env:SYSTEM_JOBID}':"
        Invoke-RestMethod https://ipinfo.io/json | Format-List

        $selfLink = "${env:SYSTEM_TASKDEFINITIONSURI}${env:SYSTEM_TEAMPROJECT}/_build/results?buildId=${env:BUILD_BUILDID}&view=logs&j=${env:SYSTEM_JOBID}&t=${env:SYSTEM_TASKINSTANCEID}"
        Write-Host "Link to this output: $selfLink"
      displayName: 'Show Azure VM instance info'
      workingDirectory: '$(scriptDirectory)'
